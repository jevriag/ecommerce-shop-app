const mongoose = require('mongoose');

const Schema = mongoose.Schema;

const productSchema = new Schema({
    title: {
        type: String,
        required: true
    },
    price: {
        type: Number,
        required: true
    },
    description: {
        type: String,
        required: true
    },
    imageUrl: {
        type: String,
        required: true
    },
    name: {
        type: String,
        required: true
    },
    userId: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: true
    }
});
/*
    mongoose takes the model name, so product, turns it to all lowercase and
    takes the plural form of that and that will then be used as a collection (in mongodb)
*/

module.exports = mongoose.model('Product', productSchema);











































// const mongodb = require('mongodb');
// const getDb = require('../util/database').getDb;
//
// class Product {
//   constructor(title, price, description, imageUrl, id, userId) {
//     this.title = title;
//     this.price = price;
//     this.description = description;
//     this.imageUrl = imageUrl;
//     this._id = id ? new mongodb.ObjectId(id) : null;
//     this.userId = userId;
//   }
//
//   save () {
//     const db = getDb();
//     let dbOp;
//     if (this._id) {
//     //    update the product
//         dbOp = db
//             .collection('products')
//             .updateOne({ _id: this._id }, { $set: this });
//     //    { $set: this }) means { $set: title: this.title, price: this.price and so on })
//     } else {
//         dbOp = db.collection('products').insertOne(this);
//     }
//     return dbOp
//         .then(result => {
//             console.log(result);
//         })
//         .catch(err => {
//             console.log(err);
//         })
//   }
//
//   static fetchAll() {
//       const db = getDb();
//       return db
//         .collection('products')
//           /*
//             find command is cursor (an object) provided by mongodb,
//             which allows us to go through our elements
//            */
//         .find()
//         .toArray()
//         .then(products => {
//             return products;
//         })
//         .catch(err => {
//             console.log(err);
//         })
//   }
//
//   static findById(prodId) {
//       const db = getDb();
//       return db
//           .collection('products')
//           /*
//              we want to find only one product.And to do that,we'll narrow down
//              the result set with find and  then I'll pass a javascript object
//              to it which allows me to configure a filter and I want to look for
//              a product where _id(mongodb property) is equal to prodID because
//              that's the ID of the product I'm looking for. So objectId is an
//              object provided by mongodb we can't compare _id(autogenerated by
//              mongodb) which in the database.It will only hold objectId values
//              with  a string because a string is not equal to the objectId and
//              mongodb will only not compare this with the entire  objectID.So
//              to fix this,I'll import mongodb. Now I can use mongodb to get
//              access to that objectId type.
//           */
//           .find({ _id: new mongodb.ObjectId(prodId) })
//           .next()
//           .then(product => {
//               console.log(product);
//               return product;
//           })
//           .catch(err => {
//               console.log(err);
//           })
//   }
//
//
//   static deleteById(prodId) {
//     const db = getDb();
//     return db
//         .collection('products')
//         .deleteOne({ _id: new mongodb.ObjectId(prodId) })
//         .then(result => {
//             console.log('Deleted');
//         })
//         .catch(err => {
//             console.log(err);
//         });
//     }
// }
// module.exports = Product;